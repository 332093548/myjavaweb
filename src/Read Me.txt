1: spring:封装了数据访问层的核心代码,并且可以使用层与层解耦(高内聚,低耦合).spring是后台框架,因此只需要创建java程序即可

2: 使用框架只需要两步：1: 加载配置文件 2: 添加jar包 (后面讲解boot,版本必须4.0或者以上)

3: 通过案例已经了解如何通过spring来创建bean,并且给它赋值(value ref)

4: 通过spring来优化项目(从下向上优化),首先要加载Spring的配置和Jar包

   4.1: 通过连接池(负责数据库的连接操作,并且一开始会初始化Connection对象)取代JdbcUtils
   
   4.2: JdbcTemplate依赖DataSouce
   
   4.3: ProductDaoImpl依赖JdbcTemplate
   
请注意:上面的所有依赖都配置在XML中,以后的main方法与junit单元测试不能够直接new对象(JVM创建Java对象)而是通过Spring getBean获取(spring框架来创建对象)

5: 真实项目中,如果插入成功,则插入的信息需要记录日志,如果插入失败,则异常需要处理.这就意味着在service不但要有事务,还要有日志,或者异常的处理代码.

同样这些代码,在很多的方法中都需要编写,而且功能相同,因此也属于横切面的代码可以采用Spring AOP(面向切面编程来解决)

6: 注解有三种: 元注解(@Target),系统注解(@Override),自定义注解

       元注解:就是用来定义注解的注解
       
7: 创建ProductController,通过它依赖productService,我们需要在类和方法上面都要添加:@RequestMapping这样前端就可以通过地址访问Controller

        注意: 当前spring与mvc的配置文件都没有加载,在web项目中有一个web.xml的配置文件,此文件就是项目启动入口

8: 在web开发中常见的三种异常分析:
  
    1: Firefox 无法建立到 localhost:8080 服务器的连接 ==> 说明当前web容器(tomcat)根本就没有启动  ==> 启动Tomcat
    
    2: 404: 说明容器已经启动,但是根据地址查找不到相关的资源 此时应该检查访问的URL地址

    3: 500: 说明当前容器已经启动,而且资源已经找到,但是在解析资源的时候抛出异常,此时应该去检查资源的代码
    
Spring MVC框架的搭建:

   1: 创建save.jsp页面,此页面用来充当MVC中的显示层View
   
   2: 创建ProductController,注意它要依赖ProductService(采用注解@Resource)
   
   3: 此Controller需要前端访问,因此类和方法上面都需要配置：RequestMapping,由于此类需要交给Spring管理还需要配置：@Controller
   
   4: 所有注解,都需要配置配置文件中开启注解扫描: 因此需要mvc-public.xml中添加: <context:component-scan base-package="cn.dw.controller" />
   
   5: 以上就是MVC的配置,但是不要忘记,配置文件需要在启动的时候加载,因此需要web.xml中配置: (<load-on-startup>1</load-on-startup>就是配置启动时加载)
   
    <servlet>
		<servlet-name>dispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-*.xml,classpath:mvc-*.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>dispatcherServlet</servlet-name>
		<url-pattern>*.mvc</url-pattern>
	</servlet-mapping> 
	
	6: 由于前端请求中有*.css/*.js 因此为了提高效率在web.xml中可以配置过滤的后缀: *.mvc
	
	7: 在save.jsp中添加访问Controller的地址: action="<%=request.getContextPath()%>/product/save.mvc"










